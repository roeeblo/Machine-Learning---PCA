# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ayDcA2SnIbjR9OQD0aQxI9OHfuosBvHy
"""

import pandas as pd
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np

from google.colab import files

df = pd.read_excel('4BC.xlsx')

df.head()

"""#1. Using PCA on the features

Separating the features from the target column
"""

features = df.drop(['B.C.', 'id'], axis=1)
target = df['B.C.']

"""Noramlizing the features"""

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

"""Performing PCA"""

pca = PCA(n_components=3)
principal_components = pca.fit_transform(scaled_features)

"""#2. Displaying the 3D graph

Creating the new DataFrame for the PCs
"""

pca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2', 'PC3'])
pca_df['B.C.'] = target

"""Displaying"""

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

unique_targets = pca_df['B.C.'].unique()

for target in unique_targets:
    subset = pca_df[pca_df['B.C.'] == target]
    ax.scatter(subset['PC1'], subset['PC2'], subset['PC3'], label=target, alpha=0.7)

ax.set_title("3D PCA Visualization")
ax.set_xlabel("Principal Component 1")
ax.set_ylabel("Principal Component 2")
ax.set_zlabel("Principal Component 3")
ax.legend(title="B.C.")
plt.show()

"""#3. Explained Variance & Eigenvalue"""

explained_variance = pca.explained_variance_ratio_
eigenvalues = pca.explained_variance_

print("Explained Variance Ratios:", explained_variance)
print("Eigenvalues:", eigenvalues)
print("Total Explained Variance:", sum(explained_variance))

"""#4. Finding & Removing Ouliers"""

pca_space = principal_components
pca_mean = np.mean(pca_space, axis=0)
distances = np.sqrt(np.sum((pca_space - pca_mean) ** 2, axis=1))

# Points farther than 3 standard deviations)
threshold = np.mean(distances) + 3 * np.std(distances)
outliers = np.where(distances > threshold)[0]

print("\nOutliers:")
print(df.iloc[outliers])

"""We can see the outliers from the 3D visualiztion and from the outlier detection above.
These 4 outliers (id: 90,92,101,105) have very high/low values that don't correspond with the rest of their respected features.
The other outlier (id: 248) was not found in the in the code detection above but we could detect it in the 3D visualization. Going through the Dataset we could find this outlier that only has it's "Rs" value to be very low while the rest of it's values are normal.

#5. Removing outliers & Repeating steps 2,3

Creating new DataFrame without the outliers mentioned in previous step
"""

df_cleaned = df.drop(index=[89, 91, 100, 104, 249])
features_cleaned = df_cleaned.drop(['B.C.', 'id'], axis=1)
target_cleaned = df_cleaned['B.C.']

"""Scaling & PCA"""

features_scaled_cleaned = scaler.fit_transform(features_cleaned)

pca_cleaned = PCA(n_components=3)
principal_components_cleaned = pca_cleaned.fit_transform(features_scaled_cleaned)

"""Creating the new DataFrame"""

target_cleaned = target_cleaned.reset_index(drop=True)
pca_df_cleaned = pd.DataFrame(data=principal_components_cleaned, columns=['PC1', 'PC2', 'PC3'])
pca_df_cleaned['B.C.'] = target_cleaned

"""Displaying 3D graph for the cleaned DataFrame"""

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

unique_targets = pca_df_cleaned['B.C.'].unique()

for target in unique_targets:
    subset = pca_df_cleaned[pca_df_cleaned['B.C.'] == target]
    ax.scatter(subset['PC1'], subset['PC2'], subset['PC3'], label=target, alpha=0.7)

ax.set_title("3D PCA Visualization")
ax.set_xlabel("Principal Component 1")
ax.set_ylabel("Principal Component 2")
ax.set_zlabel("Principal Component 3")
ax.legend(title="B.C.")
plt.show()

"""#6. Using a different method (LDA)

Using the cleaned features from previous steps for LDA
"""

features_scaled_cleaned = scaler.fit_transform(features_cleaned)

lda = LDA(n_components=3)
lda_components = lda.fit_transform(features_scaled_cleaned, target_cleaned)

"""Creating the new DataFrame"""

lda_df = pd.DataFrame(data=lda_components, columns=['LDA1', 'LDA2', 'LDA3'])
lda_df['B.C.'] = target_cleaned.reset_index(drop=True)
lda_df['B.C.'] = target_cleaned

"""Displaying 3D graph for the cleaned DataFrame"""

fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection='3d')

unique_targets = lda_df['B.C.'].unique()

for target in unique_targets:
    subset = lda_df[lda_df['B.C.'] == target]
    ax.scatter(subset['LDA1'], subset['LDA2'], subset['LDA3'], label=target, alpha=0.7)

ax.set_title("3D LDA Visualization")
ax.set_xlabel("LDA 1")
ax.set_ylabel("LDA 2")
ax.set_zlabel("LDA 3")
ax.legend(title="B.C.")
plt.show()